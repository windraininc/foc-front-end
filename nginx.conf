##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
    listen 80;
    # listen [::]:80 default_server;

    # SSL configuration
    #
    # listen 443 ssl default_server;
    # listen [::]:443 ssl default_server;
    #
    # Note: You should disable gzip for SSL traffic.
    # See: https://bugs.debian.org/773332
    #
    # Read up on ssl_ciphers to ensure a secure configuration.
    # See: https://bugs.debian.org/765782
    #
    # Self signed certs generated by the ssl-cert package
    # Don't use them in a production server!
    #
    # include snippets/snakeoil.conf;

    # Add index.php to the list if you are using PHP
    # index index.html index.htm index.nginx-debian.html;
    # root /home/littlekey/workspace/foc-front-end;
    keepalive_timeout 5;
    server_name foc.country-road.com;
    charset utf-8;

    error_page 404 /404;
    location /404 {
        rewrite ^/(.*) /app/components/error/404.html break;
        proxy_pass http://test_server;
        internal;
    }
    error_page 500 502 503 504 /50x;
    location /50x {
        rewrite ^/(.*) /app/components/error/50x.html break;
        proxy_pass http://test_server;
        internal;
    }

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        # try_files $uri /index.html;
        rewrite ^/(.*) /app/components/$1/$1View.html break;
        proxy_pass http://test_server;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_intercept_errors on;
        # proxy_set_header X-Forwarded-Proto https;
        # proxy_set_header Authorization $http_authorization;
    }

    location /static {
        rewrite ^/static/(.*) /assets/$1 break;
        proxy_pass http://test_server;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_intercept_errors on;
        # proxy_set_header X-Forwarded-Proto https;
        # proxy_set_header Authorization $http_authorization;
    }

    location ~ ^/(.*js|css|jpg|png) {
        gzip_static on;
        expires 1y;
        add_header Cache-Control public;
        add_header ETag "";

        break;
    }

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #   include snippets/fastcgi-php.conf;
    #
    #   # With php5-cgi alone:
    #   fastcgi_pass 127.0.0.1:9000;
    #   # With php5-fpm:
    #   fastcgi_pass unix:/var/run/php5-fpm.sock;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #   deny all;
    #}
}

# test server
upstream test_server {
    server 127.0.0.1:8000;
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#   listen 80;
#   listen [::]:80;
#
#   server_name example.com;
#
#   root /var/www/example.com;
#   index index.html;
#
#   location / {
#       try_files $uri $uri/ =404;
#   }
#}
